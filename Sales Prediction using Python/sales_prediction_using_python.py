# -*- coding: utf-8 -*-
"""Sales Prediction using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CD8gU1ND4zcNz20YIipQnxeyUFeweNXI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv("/content/Advertising.csv", index_col=0)
df.head()

df.shape

df.describe()

print(df.info())
print(df.describe())

print(df.corr())

for col in ['TV', 'Radio', 'Newspaper']:
    plt.scatter(df[col], df['Sales'], alpha=0.7)
    plt.xlabel(col)
    plt.ylabel("Sales")
    plt.title(f"Sales vs {col}")
    plt.show()

sns.pairplot(df, x_vars=['TV', 'Radio', 'Newspaper'], y_vars='Sales', kind='scatter')
plt.show()

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

df['TV'].plot.hist(bins=10)
plt.show()

df['Radio'].plot.hist(bins=10 , color="brown", xlabel='Radio')
plt.show()

df['Newspaper'].plot.hist(bins=10 , color="purple", xlabel='Newspaper')
plt.show()

sns.heatmap(df.corr(), annot=True)
plt.show()

sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

from  sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

print(X_train)

print(X_test)

print(y_train)

print(y_test)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

print(model.coef_)
print(model.intercept_)
y_pred = model.predict(X_test)

res=y_test-y_pred
print(res)

res= model.predict(X_test)
print(res)

print(y_test)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

rf = RandomForestRegressor(n_estimators=200, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

def eval_model(y_true, y_pred, name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred, squared=False)
    r2 = r2_score(y_true, y_pred)
    print(f"{name} → MAE: {mae:.3f}, RMSE: {rmse:.3f}, R²: {r2:.3f}")

def eval_model(y_true, y_pred, name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred) ** 0.5   # بدل squared=False
    r2 = r2_score(y_true, y_pred)
    print(f"{name} → MAE: {mae:.3f}, RMSE: {rmse:.3f}, R²: {r2:.3f}")

print("Linear Regression Coefficients:")
for feat, coef in zip(X.columns, lr.coef_):
    print(f"{feat}: {coef:.3f}")

print("\nRandom Forest Feature Importances:")
for feat, imp in zip(X.columns, rf.feature_importances_):
    print(f"{feat}: {imp:.3f}")

residuals = y_test - y_pred_rf
plt.scatter(y_pred_rf, residuals, alpha=0.7)
plt.axhline(0, color='red', linestyle='--')
plt.xlabel("Predicted Sales")
plt.ylabel("Residuals")
plt.title("Residuals vs Predicted (Random Forest)")
plt.show()

scenario = X_test.copy() * 1.10
pred_base = rf.predict(X_test)
pred_plus10 = rf.predict(scenario)

model.coef_

model = LinearRegression()
model.fit(X_train, y_train)

model.intercept_

0.05473199*69.2 + 7.14382225

plt.plot(res)



print("\nAverage sales (baseline):", pred_base.mean())

print("Average sales (+10% ads):", pred_plus10.mean())

print("Expected average change:", (pred_plus10 - pred_base).mean())

# --- TV vs Sales ---
x = X_test['TV']
y = y_test

plt.scatter(x, y, alpha=0.7)
plt.plot(x, model.intercept_ + model.coef_[0] * x, 'r', label="Regression Line")
plt.xlabel("TV")
plt.ylabel("Sales")
plt.title("Linear Regression: TV vs Sales")
plt.legend()
plt.show()

# --- Radio vs Sales ---
x = X_test['Radio']
y = y_test

plt.scatter(x, y, alpha=0.7)
plt.plot(x, model.intercept_ + model.coef_[1] * x, 'r', label="Regression Line")
plt.xlabel("Radio")
plt.ylabel("Sales")
plt.title("Linear Regression: Radio vs Sales")
plt.legend()
plt.show()

# --- Newspaper vs Sales ---
x = X_test['Newspaper']
y = y_test

plt.scatter(x, y, alpha=0.7)
plt.plot(x, model.intercept_ + model.coef_[2] * x, 'r', label="Regression Line")
plt.xlabel("Newspaper")
plt.ylabel("Sales")
plt.title("Linear Regression: Newspaper vs Sales")
plt.legend()
plt.show()

x1 = X_test['TV']
x2 = X_test['Radio']
y = y_test

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(x1, x2, y, c='blue', marker='o', alpha=0.6, label="Actual")

x1_surf, x2_surf = np.meshgrid(
    np.linspace(x1.min(), x1.max(), 20),
    np.linspace(x2.min(), x2.max(), 20)
)

ax.plot_surface(x1_surf, x2_surf, z_surf, color='red', alpha=0.3)

ax.set_xlabel('TV')
ax.set_ylabel('Radio')
ax.set_zlabel('Sales')
ax.set_title("3D Linear Regression Plane (TV & Radio vs Sales)")

plt.show()

print(y_test.shape, y_pred_lr.shape, y_pred_rf.shape)

